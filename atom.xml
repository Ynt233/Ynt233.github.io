<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wuyi&#39;s blog</title>
  
  <subtitle>余宁滔的博客</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-08T08:49:28.522Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>wuyi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/01/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%A6%81%E7%82%B9/"/>
    <id>http://example.com/2022/01/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E8%A6%81%E7%82%B9/</id>
    <published>2022-01-18T08:58:05.550Z</published>
    <updated>2022-01-08T08:49:28.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-1-5中断和异常"><a href="#1-1-5中断和异常" class="headerlink" title="1.1_5中断和异常"></a>1.1_5中断和异常</h3><p>用户态-》核心态：中断是<strong>唯一途径</strong></p><p>核心态-》用户态：通过特权指令，将程序状态字（PSW）的标志位设置为用户态。</p><p>中断分类：</p><p>内中断：CPU内部发生（异常、陷入、例外）</p><p>外中断：用户干预或外设请求</p><h3 id="2-2-3调度算法的评价指标"><a href="#2-2-3调度算法的评价指标" class="headerlink" title="2.2_3调度算法的评价指标"></a>2.2_3调度算法的评价指标</h3><h4 id="1-CPU利用率"><a href="#1-CPU利用率" class="headerlink" title="1.CPU利用率"></a>1.CPU利用率</h4><p>利用率=CPU忙碌时间/总时间</p><h4 id="2-系统吞吐量"><a href="#2-系统吞吐量" class="headerlink" title="2.系统吞吐量"></a>2.系统吞吐量</h4><p>指单位时间内完成作业的数量</p><p>系统吞吐量=总共完成了多少道作业/总共花了多少时间（道/秒）</p><h4 id="3-周转时间"><a href="#3-周转时间" class="headerlink" title="3.周转时间"></a>3.周转时间</h4><p>指作业被提交给系统开始，到作业完成为止的这段时间间隔。</p><p>（作业）周转时间=作业完成时间-作业提交时间（到达时间）</p><p>平均周转时间=各作业周转时间和/作业数</p><p>带权周转时间=作业周转时间/作业实际运行时间</p><h4 id="4-等待时间"><a href="#4-等待时间" class="headerlink" title="4.等待时间"></a>4.等待时间</h4><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220101144409330.png" alt="image-20220101144409330"></p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220101144447771.png" alt="image-20220101144447771"></p><h4 id="5-响应时间"><a href="#5-响应时间" class="headerlink" title="5.响应时间"></a>5.响应时间</h4><p>从用户提出请求到首次响应所用的时间。</p><h3 id="2-2-4调度算法"><a href="#2-2-4调度算法" class="headerlink" title="2.2_4调度算法"></a>2.2_4调度算法</h3><h4 id="1-先来先服务（FCFS）"><a href="#1-先来先服务（FCFS）" class="headerlink" title="1.先来先服务（FCFS）"></a>1.先来先服务（FCFS）</h4><p>“公平”</p><p>用于<strong>作业</strong>调度时，考虑哪个作业先到达后备队列（外存中）；用于<strong>进程</strong>调度时，考虑哪个进程先到达就绪队列。</p><p><strong>非抢占式算法</strong></p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220101145440921.png" alt="image-20220101145440921"></p><p>不会导致饥饿</p><h4 id="2-短作业优先（SJF）"><a href="#2-短作业优先（SJF）" class="headerlink" title="2.短作业优先（SJF）"></a>2.短作业优先（SJF）</h4><p>每次调度时选择<strong>当前已到达</strong>且运行时间最短的作业/进程。运行时间一样时先调度先到达的。</p><p>可使用抢占式的短作业优先（最短剩余时间优先算法）</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220101150642298.png" alt="image-20220101150642298"></p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220101152013452.png" alt="image-20220101152013452"></p><h4 id="3-高响应比优先"><a href="#3-高响应比优先" class="headerlink" title="3.高响应比优先"></a>3.高响应比优先</h4><p>响应比=（等待时间+要求服务时间（运行时间））/要求服务时间</p><p>在每次调度时选择响应比最高的为其服务</p><p><strong>非抢占式</strong></p><h3 id="2-2-5调度算法"><a href="#2-2-5调度算法" class="headerlink" title="2.2_5调度算法"></a>2.2_5调度算法</h3><h4 id="1-时间片轮转"><a href="#1-时间片轮转" class="headerlink" title="1.时间片轮转"></a>1.时间片轮转</h4><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220108141550050.png" alt="image-20220108141550050"></p><h4 id="2-优先级"><a href="#2-优先级" class="headerlink" title="2.优先级"></a>2.优先级</h4><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220108142350903.png" alt="image-20220108142350903"></p><h4 id="3-多级反馈队列"><a href="#3-多级反馈队列" class="headerlink" title="3.多级反馈队列"></a>3.多级反馈队列</h4><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220108143258368.png" alt="image-20220108143258368"></p><p>总结：</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220108143337846.png" alt="image-20220108143337846"></p><h3 id="2-3-1进程同步、互斥"><a href="#2-3-1进程同步、互斥" class="headerlink" title="2.3_1进程同步、互斥"></a>2.3_1进程同步、互斥</h3><p>临界资源：一个时间段内只允许一个进程使用。</p><h3 id="2-4-1死锁的概念"><a href="#2-4-1死锁的概念" class="headerlink" title="2.4_1死锁的概念"></a>2.4_1死锁的概念</h3><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220108164925332.png" alt="image-20220108164925332"></p><h3 id="3-1-1内存的基础知识"><a href="#3-1-1内存的基础知识" class="headerlink" title="3.1_1内存的基础知识"></a>3.1_1内存的基础知识</h3><p>​    内存是用于存放数据的硬件，<strong>程序执行前需要先放到内存中才能被CPU处理</strong>。</p><ul><li>若计算机<strong>按字节编址</strong>，则每个存储单元大小为<strong>1字节</strong>，即1B，即8个二进制位。</li><li>若字长为16位（现多为32或64位）的计算机<strong>按字编址</strong>，则每个存储单元大小为<strong>1个字</strong>，即16个二进制位。</li></ul><p>三种装入方式：</p><ul><li>绝对装入：只适用于单道程序环境，且完全有可能知道程序将驻留在内存中的什么位置时使用，将产生绝对地址（物理地址）的目标代码。</li><li>可重定位装入：多道程序环境，可根据具体情况，将装入模块装入到内存的适当位置，在装入时对地址进行“重定位”，将逻辑地址（相对地址）变换为物理地址。</li><li>动态运行时装入：动态运行的装入程序把转入模块装入内存之后，并不立即把装入模块的逻辑地址进行转换，而是把这种地址转换推迟到程序执行时才进行，装入内存后的所有地址都仍是逻辑地址。这种方式需要重定位寄存器的支持：在重定位寄存器中存放装入模块的<strong>起始位置</strong>。</li></ul><h3 id="3-1-3覆盖与交换"><a href="#3-1-3覆盖与交换" class="headerlink" title="3.1_3覆盖与交换"></a>3.1_3覆盖与交换</h3><h4 id="1-覆盖"><a href="#1-覆盖" class="headerlink" title="1.覆盖"></a>1.覆盖</h4><p>用于”解决程序大小超过物理内存总和“的问题。</p><p>思想：将程序分为多个段，常用的段常驻内存，不常用的段在需要时调入内存。</p><p>内存分为一个“固定区”和若干个“覆盖区”。</p><p>需要常驻内存的段放在固定区。调入后不再调出（除非运行结束）。</p><p>不常用的段放在覆盖区，需要时调入内存，不需要时调出。</p><h4 id="2-交换"><a href="#2-交换" class="headerlink" title="2.交换"></a>2.交换</h4><p>内存紧张时，系统将内存中某些进程暂时换出外存，把外存中某些已具备运行条件的进程换入内存（进程在内存与磁盘间动态调度）。</p><p>1.通常将磁盘空间分为交换区和文件区，文件区用于<strong>存放文件</strong>，<strong>主要追求存储空间的利用率</strong>，因此对文件区空间的管理常采用离散分配方式；对换区空间只占磁盘空间的小部分，存放被<strong>换出的进程数据</strong>，对换速度直接影响系统的整体速度，因此对换区<strong>主要追求换入换出的速度</strong>，因此常采用<strong>连续分配方式</strong>。<strong>对换区的I/O速度比文件区块。</strong></p><h3 id="3-1-5动态分区分配算法"><a href="#3-1-5动态分区分配算法" class="headerlink" title="3.1_5动态分区分配算法"></a>3.1_5动态分区分配算法</h3><h4 id="1-首次适应算法"><a href="#1-首次适应算法" class="headerlink" title="1.首次适应算法"></a>1.首次适应算法</h4><p><strong>算法思想：</strong>每次都从低地址开始查找，找到第一个能够满足大小的空闲分区。</p><p><strong>实现：</strong>空闲分区以地址递增的次序排列。每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p><strong>优点：</strong>算法开销小，回收分区后一般不需要对空闲分区队列重新排列。</p><h4 id="2-最佳适应算法"><a href="#2-最佳适应算法" class="headerlink" title="2.最佳适应算法"></a>2.最佳适应算法</h4><p><strong>算法思想：</strong>由于动态分区分配是一种连续分配方法，为各进程分配的空间必须是连续分配方式，为各进程分配的空间必须是连续的一整片区域。因此为了保证当“大进程”到来时能有连续的大片空间，可以尽可能多的留下大片的空闲区，即优先使用更小的空闲区。</p><p><strong>如何实现：</strong>空闲分区按容量递增次序链接。每次分配内存时顺序查找空闲分区链，找到大小能满足要求的第一个空闲分区。</p><p><strong>优点：</strong></p><p>会有更多的大分区被保留下来，更能满足大进程的需求。</p><p><strong>缺点：</strong></p><p>每次都选最小的分区进行分配，会留下越来越多的、很小的、难以利用的内存块。因此这种方法会产生很多的外部碎片。</p><h4 id="3-最坏适应算法"><a href="#3-最坏适应算法" class="headerlink" title="3.最坏适应算法"></a>3.最坏适应算法</h4><p><strong>算法思想：</strong></p><p>为了解决最佳适应算法的问题–即留下太多难以利用的小碎片，可以对每次分配时优先使用最大的连续空闲区，这样分配后剩余的空间去就不会太小，更方便使用。</p><p><strong>如何实现：</strong></p><p>空闲分区按容量递减次序链接。每次分配内存时顺序查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p><strong>优点：</strong></p><p>可以减少难以利用的小碎片。</p><p><strong>缺点：</strong></p><p>每次都选最大的分区进行分配，虽然可以让分配后留下的空闲区更大，更可用，但是这种方式会导致较大的连续空闲区被迅速用完。如果之后有“大进程”到达就没有内存分配可用了。</p><h4 id="4-临近适应算法"><a href="#4-临近适应算法" class="headerlink" title="4.临近适应算法"></a>4.临近适应算法</h4><p><strong>算法思想：</strong></p><p>首次适应算法每次都从链头开始查找，这可能会导致低地址部分出现很多小的空间分区，而每次分配查找是，都要经过这些分区，因此也增加了查找的开销。如果每次都从上次查找结束的位置开始检索就能解决上述问题。</p><p><strong>如何实现：</strong></p><p>空闲分区以地址递增的顺序排列。每次分配内存时从上次查找结束的位置开始查找空闲分区链（或空闲分区表），找到大小能满足要求的第一个空闲分区。</p><p><strong>优点：</strong></p><p>不用每次都从低地址的小分区开始检索，算法开销小。</p><p><strong>缺点：</strong></p><p>会使高地址的大分区也被用完。</p><p>首次适应算法每次都要从头查找，每次都需要检索低地址的小分区。但是这种规则也决定了当低地址部分有更小的分区可以满足需求时，会更有可能用到低地址部分的小分区，也会更有可能把高地址部分的大分区保留下来（最佳适应算法的优点）。</p><p>邻近适应算法的规则可能会导致无论低地址、高地址部分的空闲分区都有相同的概率被使用，也就导致了高地址部分的大分区更有可能被使用，划分成为小分区，最后导致无大分区可用（最大适应算法的缺点）。</p><p>综上，首次适应算法的效果反而最好。</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20211226215810088.png" alt="image-20211226215810088"></p><h3 id="3-1-6基本分页存储管理概念"><a href="#3-1-6基本分页存储管理概念" class="headerlink" title="3.1_6基本分页存储管理概念"></a>3.1_6基本分页存储管理概念</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-1-5中断和异常&quot;&gt;&lt;a href=&quot;#1-1-5中断和异常&quot; class=&quot;headerlink&quot; title=&quot;1.1_5中断和异常&quot;&gt;&lt;/a&gt;1.1_5中断和异常&lt;/h3&gt;&lt;p&gt;用户态-》核心态：中断是&lt;strong&gt;唯一途径&lt;/strong&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/01/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/01/18/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-01-18T08:57:25.049Z</published>
    <updated>2022-01-11T04:29:52.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、操作系统引论"><a href="#一、操作系统引论" class="headerlink" title="一、操作系统引论"></a>一、操作系统引论</h1><h3 id="1-1-1、操作系统目标"><a href="#1-1-1、操作系统目标" class="headerlink" title="1.1.1、操作系统目标"></a>1.1.1、操作系统目标</h3><ul><li>方便性</li><li>有效性</li><li>可扩展性</li><li>开放性</li></ul><h3 id="1-1-2-操作系统作用"><a href="#1-1-2-操作系统作用" class="headerlink" title="1.1.2 操作系统作用"></a>1.1.2 操作系统作用</h3><ul><li>用户与计算机硬件系统之间的接口</li><li>计算机系统资源的管理者</li><li>实现了计算机资源的抽象</li></ul><h3 id="1-2-1-未配置操作系统的计算机系统"><a href="#1-2-1-未配置操作系统的计算机系统" class="headerlink" title="1.2.1 未配置操作系统的计算机系统"></a>1.2.1 未配置操作系统的计算机系统</h3><p>2、脱机输入/输出方式：为了解决人机矛盾以及CPU和I/O设备之间速度不匹配的矛盾。</p><h3 id="1-2-2-单道批处理系统"><a href="#1-2-2-单道批处理系统" class="headerlink" title="1.2.2 单道批处理系统"></a>1.2.2 单道批处理系统</h3><p>2、缺点：不能充分利用系统资源</p><h3 id="1-2-3-多道批处理系统"><a href="#1-2-3-多道批处理系统" class="headerlink" title="1.2.3 多道批处理系统"></a>1.2.3 多道批处理系统</h3><p>将作业放在外存中，通过一定的作业调度算法，再将作业调入内存中，并且共享CPU等计算资源。</p><p>目的：为了进一步提高资源利用率和系统吞吐量</p><p>优缺点：（选择）</p><ul><li>资源利用率高</li><li>系统吞吐量大</li><li>周转时间长</li><li>无交互能力</li></ul><h3 id="1-2-4-分时系统"><a href="#1-2-4-分时系统" class="headerlink" title="1.2.4 分时系统"></a>1.2.4 分时系统</h3><p>引入的需求：人机交互、共享主机</p><p>特征：</p><ul><li>多路性</li><li>独立性</li><li>及时性</li><li>交互性</li></ul><h3 id="1-2-5-实时任务类型"><a href="#1-2-5-实时任务类型" class="headerlink" title="1.2.5 实时任务类型"></a>1.2.5 实时任务类型</h3><ul><li>周期性实时任务和非周期性实时任务</li><li>硬实时任务和软实时任务</li></ul><h2 id="1-3-操作系统基本特性"><a href="#1-3-操作系统基本特性" class="headerlink" title="1.3 操作系统基本特性"></a>1.3 操作系统基本特性</h2><h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h3><p>并发与并行：并发为时间间隔内，并行为同一时刻</p><h3 id="共享"><a href="#共享" class="headerlink" title="共享"></a>共享</h3><p>互斥共享方式、 同时访问方式</p><h3 id="虚拟（可能简答）"><a href="#虚拟（可能简答）" class="headerlink" title="虚拟（可能简答）"></a>虚拟（可能简答）</h3><ol><li><p>时分复用技术</p><p>利用某设备为一用户服务的空闲时间，又转去为其他用户服务，使设备得到最充分的利用。<br>（1）虚拟处理机技术</p><p>利用多道程序设计技术，为每个程序至少建立一个进程，让多道程序并发执行。</p><p>（2）虚拟设备技术</p><p>将一台物理I/O设备虚拟为多台逻辑I/O设备，并允许每个用户占用一台逻辑上的I/O设备。</p></li><li><p>空分复用技术</p><p>利用存储器的空闲空间分区域存放和运行其他多道程序，以此来提高内存的利用率。可引入虚拟存储实现在逻辑上扩大存储器容量。</p></li></ol><h3 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h3><h2 id="1-4-操作系统的主要功能"><a href="#1-4-操作系统的主要功能" class="headerlink" title="1.4 操作系统的主要功能"></a>1.4 操作系统的主要功能</h2><h3 id="1-4-1-处理机"><a href="#1-4-1-处理机" class="headerlink" title="1.4.1 处理机"></a>1.4.1 处理机</h3><p>进程控制、进程同步、进程通信、调度</p><h3 id="1-4-2-存储器"><a href="#1-4-2-存储器" class="headerlink" title="1.4.2 存储器"></a>1.4.2 存储器</h3><p>内存分配、内存保护、地址映射、内存扩充</p><h3 id="1-4-3-设备"><a href="#1-4-3-设备" class="headerlink" title="1.4.3 设备"></a>1.4.3 设备</h3><p>缓冲管理、设备分配、设备处理</p><h3 id="1-4-4-文件"><a href="#1-4-4-文件" class="headerlink" title="1.4.4 文件"></a>1.4.4 文件</h3><p>文件存储空间管理、目录管理、文件的读写管理和保护</p><h3 id="1-4-5-操作系统和用户之间的接口"><a href="#1-4-5-操作系统和用户之间的接口" class="headerlink" title="1.4.5 操作系统和用户之间的接口"></a>1.4.5 操作系统和用户之间的接口</h3><p>用户接口、程序接口</p><h1 id="二、进程"><a href="#二、进程" class="headerlink" title="二、进程"></a>二、进程</h1><h3 id="2-1-3-程序并发执行时的特征"><a href="#2-1-3-程序并发执行时的特征" class="headerlink" title="2.1.3 程序并发执行时的特征"></a>2.1.3 程序并发执行时的特征</h3><ul><li>间断性</li><li>失去封闭性</li><li>不可再现性</li></ul><h3 id="2-2-1-进程的定义和特征"><a href="#2-2-1-进程的定义和特征" class="headerlink" title="2.2.1 进程的定义和特征"></a>2.2.1 进程的定义和特征</h3><p>进程：由程序段、数据段和PCB组成进程实体（进程映像）（填空）</p><p>进程是进程实体的运行过程，是系统进行资源分配和调度的一个<strong>独立单位</strong></p><p>特征：</p><ul><li>动态性</li><li>并发性</li><li>独立性</li><li>异步性</li></ul><h3 id="2-2-4-进程管理中的数据结构"><a href="#2-2-4-进程管理中的数据结构" class="headerlink" title="2.2.4 进程管理中的数据结构"></a>2.2.4 进程管理中的数据结构</h3><ul><li>内存表</li><li>设备表</li><li>文件表</li><li>进程表</li></ul><p>进程控制块中的信息：</p><ul><li>进程标识符</li><li>处理机状态（处理机上下文）</li><li>进程调度信息</li><li>进程控制信息</li></ul><p>进程控制块组织方式：线性方式、链接方式、索引方式</p><h3 id="2-3-1-操作系统内核功能"><a href="#2-3-1-操作系统内核功能" class="headerlink" title="2.3.1 操作系统内核功能"></a>2.3.1 操作系统内核功能</h3><ol><li>支撑功能<ul><li>中断处理</li><li>时钟管理</li><li>原语操作</li></ul></li><li>资源管理功能<ul><li>进程管理</li><li>存储器管理</li><li>设备管理</li></ul></li></ol><h3 id="2-3-2-进程的创建"><a href="#2-3-2-进程的创建" class="headerlink" title="2.3.2 进程的创建"></a>2.3.2 进程的创建</h3><ol><li>申请空白PCB，并获得唯一标识符</li><li>分配运行所需资源</li><li>初始化PCB</li><li>如果进程就绪队列能够接纳新进程，便将进程插入就绪队列</li></ol><h3 id="2-3-4-进程阻塞和唤醒的事件"><a href="#2-3-4-进程阻塞和唤醒的事件" class="headerlink" title="2.3.4 进程阻塞和唤醒的事件"></a>2.3.4 进程阻塞和唤醒的事件</h3><ol><li>系统请求共享资源失败</li><li>等待某种操作完成</li><li>等待新数据</li><li>等待新任务</li></ol><h3 id="2-4-1-进程同步"><a href="#2-4-1-进程同步" class="headerlink" title="2.4.1 进程同步"></a>2.4.1 进程同步</h3><p>同步机制应该遵循的规则：</p><ul><li>空闲让进</li><li>忙则等待</li><li>有限等待</li><li>让权等待</li></ul><h3 id="2-7-1线程的引入"><a href="#2-7-1线程的引入" class="headerlink" title="2.7.1线程的引入"></a>2.7.1线程的引入</h3><p>引入线程是为了减少程序在并发执行时所付出的时空开销，使OS具有更好的并发性。</p><h3 id="2-7-2-进程与线程的比较"><a href="#2-7-2-进程与线程的比较" class="headerlink" title="2.7.2 进程与线程的比较"></a>2.7.2 进程与线程的比较</h3><p>线程作为调度和分派的的基本单位，是能独立运行的基本单位。</p><ul><li>调度的基本单位（变为线程）</li><li>并发性（更高）</li><li>（不）拥有资源</li><li>独立性（更低）</li><li>系统开销（更小）</li><li>支持多处理机系统</li></ul><p>线程控制块TCB</p><h1 id="三、-处理机"><a href="#三、-处理机" class="headerlink" title="三、 处理机"></a>三、 处理机</h1><h3 id="3-1-1-处理机调度层次"><a href="#3-1-1-处理机调度层次" class="headerlink" title="3.1.1 处理机调度层次"></a>3.1.1 处理机调度层次</h3><p>高级调度、中级调度、低级调度：作业调度、内存调度、进程调度</p><h3 id="3-1-2-处理机调度算法的目标"><a href="#3-1-2-处理机调度算法的目标" class="headerlink" title="3.1.2 处理机调度算法的目标"></a>3.1.2 处理机调度算法的目标</h3><ol><li>共同目标<ul><li>（提高）资源利用率</li><li>（增强）公平性</li><li>（保持系统资源使用的）平衡性</li><li>策略强制执行</li></ul></li><li>批处理系统的目标<ul><li>平均周转时间短</li><li>系统吞吐量高</li><li>处理机利用率高</li></ul></li><li>分时系统的目标<ul><li>响应时间快</li><li>均衡性</li></ul></li></ol><h3 id="3-2-1批处理系统中的作业"><a href="#3-2-1批处理系统中的作业" class="headerlink" title="3.2.1批处理系统中的作业"></a>3.2.1批处理系统中的作业</h3><p>作业运行的三个阶段和三种状态：</p><ol><li>收容阶段</li><li>运行阶段</li><li>完成阶段</li></ol><ul><li>后备状态</li><li>运行状态</li><li>完成状态</li></ul><h3 id="3-5-3-死锁"><a href="#3-5-3-死锁" class="headerlink" title="3.5.3 死锁"></a>3.5.3 死锁</h3><ol><li>死锁的定义：如果一组进程中每一个进程都在等待仅由该组进程中其他进程才能引发的资源，那么该组进程是死锁的。</li><li>必要条件：<ul><li>互斥条件</li><li>请求和保持</li><li>不可抢占</li><li>循环等待</li></ul></li><li>处理死锁的方法<ul><li>预防死锁：通过设置某些限制条件去破坏产生死锁的4个必要条件中的1个或多个来预防死锁的产生。</li><li>避免死锁：事先不采取限制措施，而是在资源的动态分配过程中用某种方法防止系统进入不安全状态，从而避免发生死锁。</li><li>检测死锁</li><li>解除死锁</li></ul></li></ol><h1 id="四、存储器管理"><a href="#四、存储器管理" class="headerlink" title="四、存储器管理"></a>四、存储器管理</h1><h2 id="4-1"><a href="#4-1" class="headerlink" title="4.1"></a>4.1</h2><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220111004619957.png" alt="image-20220111004619957"></p><h2 id="4-3固定分区和动态分区"><a href="#4-3固定分区和动态分区" class="headerlink" title="4.3固定分区和动态分区"></a>4.3固定分区和动态分区</h2><p>固定分区将内存分为若干固定大小的部分，缺乏灵活性，易造成内存空间浪费，会产生内部碎片；动态分区根据进程的实际需要来动态地分配内存空间，会产生外部碎片。</p><h3 id="4-3-5伙伴系统"><a href="#4-3-5伙伴系统" class="headerlink" title="4.3.5伙伴系统"></a>4.3.5伙伴系统</h3><p>分区大小均为2的k次幂</p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220111005438311.png" alt="image-20220111005438311"></p><h2 id="4-4对换"><a href="#4-4对换" class="headerlink" title="4.4对换"></a>4.4对换</h2><h3 id="4-4-1多道程序下的对换"><a href="#4-4-1多道程序下的对换" class="headerlink" title="4.4.1多道程序下的对换"></a>4.4.1多道程序下的对换</h3><p>对换是指把内存中暂时不能运行的进程或暂时不用的程序和数据换到外存上，以便腾出足够的空间，再把已具备运行条件的进程或进程所需要的程序和数据换入内存。</p><h2 id="4-5分页存储管理"><a href="#4-5分页存储管理" class="headerlink" title="4.5分页存储管理"></a>4.5分页存储管理</h2><h3 id="4-6-1-分段存储管理方式"><a href="#4-6-1-分段存储管理方式" class="headerlink" title="4.6.1 分段存储管理方式"></a>4.6.1 分段存储管理方式</h3><ul><li>方便编程</li><li>信息共享</li><li>信息保护</li><li>动态增长</li><li>动态链接</li></ul><h1 id="五"><a href="#五" class="headerlink" title="五"></a>五</h1><p>局部性原理：</p><ol><li>时间局限性</li><li>空间局限性</li></ol><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220111011324373.png" alt="image-20220111011324373"></p><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220111105255974.png" alt="image-20220111105255974"></p><h1 id="六、-输入输出系统"><a href="#六、-输入输出系统" class="headerlink" title="六、 输入输出系统"></a>六、 输入输出系统</h1><h3 id="6-1-2-I-O系统的层次结构和模型"><a href="#6-1-2-I-O系统的层次结构和模型" class="headerlink" title="6.1.2 I/O系统的层次结构和模型"></a>6.1.2 I/O系统的层次结构和模型</h3><p>I/O软件的层次结构：</p><ul><li>用户层I/O软件</li><li>设备独立性软件</li><li>设备驱动程序</li><li>中断处理程序</li></ul><h3 id="6-1-3-I-O系统接口"><a href="#6-1-3-I-O系统接口" class="headerlink" title="6.1.3 I/O系统接口"></a>6.1.3 I/O系统接口</h3><ul><li>块设备接口</li><li>流设备接口</li></ul><h3 id="6-2-4-I-O通道"><a href="#6-2-4-I-O通道" class="headerlink" title="6.2.4 I/O通道"></a>6.2.4 I/O通道</h3><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220111011805186.png" alt="image-20220111011805186"></p><p>通道类型：字节多路通道、数组选择通道、数组多路通道</p><h3 id="6-3-2-中断处理的顺序（简答题）"><a href="#6-3-2-中断处理的顺序（简答题）" class="headerlink" title="6.3.2 中断处理的顺序（简答题）"></a>6.3.2 中断处理的顺序（简答题）</h3><ul><li>测定是否有未响应的中断信号</li><li>保护被中断进程的CPU环境</li><li>转入相应的设备处理程序</li><li>中断处理</li><li>恢复CPU现场并退出终端</li></ul><h3 id="6-4-1-设备驱动程序概述"><a href="#6-4-1-设备驱动程序概述" class="headerlink" title="6.4.1 设备驱动程序概述"></a>6.4.1 设备驱动程序概述</h3><p>设备驱动程序功能：</p><ul><li>接受由与本设备无关的软件发来的命令和参数，并将命令中的抽象按要求转换为与设备相关的低层操作序列</li><li>检查用户I/O请求的合法性，了解I/O设备的工作状态，传递与I/O设备操作有关的参数，设置设备的工作方式</li><li>发出I/O命令</li><li>及时响应由设备控制器发来的中断请求</li></ul><h3 id="6-4-3-对I-O设备的控制方式"><a href="#6-4-3-对I-O设备的控制方式" class="headerlink" title="6.4.3 对I/O设备的控制方式"></a>6.4.3 对I/O设备的控制方式</h3><ul><li>使用轮询的可编程I/O方式</li><li>使用中断的可编程I/O方式</li><li>直接存储器访问方式特点为：（简答）<ul><li>数据传输的基本单位是数据块</li><li>所传送的数据是从设备直接送入内存的，或者相反</li><li>仅在传送一个或多个数据块的开始和结束时，才需CPU干预</li></ul></li><li>I/O通道控制方式</li></ul><h3 id="6-6-2-假脱机系统"><a href="#6-6-2-假脱机系统" class="headerlink" title="6.6.2 假脱机系统"></a>6.6.2 假脱机系统</h3><p>通过假脱机技术，将一台物理I/O设备虚拟为多台逻辑I/O设备，从而允许多个用户共享一台物理I/O设备</p><p>SPOOLing构成：</p><ul><li>输入井和输出井</li><li>输入缓冲区和输出缓冲区</li><li>输入进程和输出进程</li><li>井管理程序</li></ul><p>假脱机打印机系统：</p><ul><li>磁盘缓冲区</li><li>打印缓冲区</li><li>假脱机管理进程和假脱机打印程序</li></ul><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220111012836936.png" alt="image-20220111012836936"></p><h1 id="七、-文件"><a href="#七、-文件" class="headerlink" title="七、 文件"></a>七、 文件</h1><h3 id="7-1-1-数据项、记录和文件"><a href="#7-1-1-数据项、记录和文件" class="headerlink" title="7.1.1 数据项、记录和文件"></a>7.1.1 数据项、记录和文件</h3><p>文件属性包括：</p><ul><li>文件类型</li><li>文件长度</li><li>文件的物理位置</li><li>文件的建立时间</li></ul><h3 id="7-1-4-文件操作"><a href="#7-1-4-文件操作" class="headerlink" title="7.1.4 文件操作"></a>7.1.4 文件操作</h3><p>最基本的文件操作：</p><ul><li>创建文件</li><li>删除文件</li><li>读文件</li><li>写文件</li><li>设置文件的读/写位置</li></ul><h2 id="7-2-文件的逻辑结构"><a href="#7-2-文件的逻辑结构" class="headerlink" title="7.2 文件的逻辑结构"></a>7.2 文件的逻辑结构</h2><p>文件的逻辑结构、文件的物理结构</p><p>文件的逻辑结构分类：</p><ul><li>从是否有结构分：有结构文件、无结构文件</li><li>组织方式分：顺序文件、索引文件、索引顺序文件</li></ul><p>顺序文件：文件记录按照各种不同的顺序进行排列</p><p>索引顺序文件：先将顺序文件分组然后以每个组的第一项建立索引</p><p>哈希文件：应用最广泛的一种直接文件，利用Hash函数将关键字转换为相应记录的地址，但通常是指向某一目录表相应表目的指针，该表目的内容指向相应记录所在的物理块。（简答题）</p><h3 id="7-3-1-文件控制块和索引节点"><a href="#7-3-1-文件控制块和索引节点" class="headerlink" title="7.3.1 文件控制块和索引节点"></a>7.3.1 文件控制块和索引节点</h3><p>文件控制块FCB：基本信息类、存取控制信息类、使用信息类</p><h3 id="7-4-1-有向无循环图实现文件共享"><a href="#7-4-1-有向无循环图实现文件共享" class="headerlink" title="7.4.1 有向无循环图实现文件共享"></a>7.4.1 有向无循环图实现文件共享</h3><h1 id="八、-外存"><a href="#八、-外存" class="headerlink" title="八、 外存"></a>八、 外存</h1><p>组织方式：连续组织方式、链接组织方式、索引组织方式</p><p>连续组织方式：（可能简答）</p><ol><li>优点：<ul><li>顺序访问容易</li><li>顺序访问速度快</li></ul></li><li>缺点：<ul><li>要求为一个文件分配连续的存储空间</li><li>必须事先知道文件长度</li><li>不能灵活的插入和删除记录</li><li>对于那些动态增长的文件，难以分配空间并且会使大量存储空间长期空闲</li></ul></li></ol><h3 id="8-3-2-提高磁盘I-O速度的其他方法（选择）"><a href="#8-3-2-提高磁盘I-O速度的其他方法（选择）" class="headerlink" title="8.3.2 提高磁盘I/O速度的其他方法（选择）"></a>8.3.2 提高磁盘I/O速度的其他方法（选择）</h3><p>提前读、延迟写、优化物理块分布、虚拟盘</p><h3 id="8-3-3-RAID（简答）"><a href="#8-3-3-RAID（简答）" class="headerlink" title="8.3.3 RAID（简答）"></a>8.3.3 RAID（简答）</h3><ul><li>可靠性高</li><li>磁盘I/O速度高</li><li>性能/性价比高</li></ul><p><img src="C:\Users\Y\AppData\Roaming\Typora\typora-user-images\image-20220111122951344.png" alt="image-20220111122951344"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一、操作系统引论&quot;&gt;&lt;a href=&quot;#一、操作系统引论&quot; class=&quot;headerlink&quot; title=&quot;一、操作系统引论&quot;&gt;&lt;/a&gt;一、操作系统引论&lt;/h1&gt;&lt;h3 id=&quot;1-1-1、操作系统目标&quot;&gt;&lt;a href=&quot;#1-1-1、操作系统目标&quot; cla</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/01/18/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/"/>
    <id>http://example.com/2022/01/18/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%BD%A2%E5%A4%84%E7%90%86%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0/</id>
    <published>2022-01-18T08:57:00.124Z</published>
    <updated>2022-01-12T17:31:31.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、绪论"><a href="#1、绪论" class="headerlink" title="1、绪论"></a>1、绪论</h1><h3 id="1-1-数字图像的概念"><a href="#1-1-数字图像的概念" class="headerlink" title="1.1 数字图像的概念"></a>1.1 数字图像的概念</h3><ul><li>图像：用各种观测系统以不同的形式或者手段观测客观世界从而获得的可以直接或者间接作用于人的视觉系统而产生的视知觉实体。其中图像可分成“图”和“像”两个概念的合成理解。</li><li>模拟图像：早期的模拟相机相片、画报、书本图片。</li><li><strong>数字图像</strong>：二维空间和亮度值都是用有限数字数值表示的图像。</li><li>利用数字化的图像扫描仪对模拟图像进行数字化，就可以将模拟图像转换成数字图像。</li></ul><h3 id="1-2-图像处理和图像分析"><a href="#1-2-图像处理和图像分析" class="headerlink" title="1.2 图像处理和图像分析"></a>1.2 图像处理和图像分析</h3><p>图像处理：</p><ul><li>图像处理：对图像信息进行加工，以满足人的视觉或者应用需求的行为。</li><li><strong>数字图像处理：利用计算机技术对数字图像进行某种数学运算和各种加工处理以改善图像的视觉效果和提高图像实用性的技术。</strong></li><li>特征：图像处理的基本特征是图像处理系统的输入和输出都是图像。</li></ul><p><strong>图像分析：</strong></p><ul><li>目的：缩减对图像的描述，以使其更适合于计算机处理及对不同目标的分类。</li><li>基本特征：图像分析系统的输入是图像，输出是对输入图像进行描述的数据信息。</li><li>图像处理和图像分析之间的关系：</li></ul><p>图像处理是对图像低级处理阶段，图像分析是对图像高级处理阶段。</p><h1 id="2、数字图像处理基础"><a href="#2、数字图像处理基础" class="headerlink" title="2、数字图像处理基础"></a>2、数字图像处理基础</h1><h3 id="2-1-二值图像"><a href="#2-1-二值图像" class="headerlink" title="2.1 二值图像"></a>2.1 二值图像</h3><p>二值图像指：<strong>每个像素点均为黑色或者白色的图像。</strong>二值图像一般用来描述字符图像，其优点是占用空间少。缺点是，当表示人物，风景的图像时，二值图像只能展示其边缘信息，图像内部的纹理特征表现不明显。这时候要使用纹理特征更为丰富的灰度图像。</p><h3 id="2-2-图像的采样和量化"><a href="#2-2-图像的采样和量化" class="headerlink" title="2.2 图像的采样和量化"></a>2.2 图像的采样和量化</h3><p><strong>采样概念</strong>：对图像的连续空间坐标x和y的离散化称为图像的采样。</p><p><strong>量化概念</strong>：对图像函数f(x,y)的幅值f的离散化称为图像灰度级的量化。</p><ul><li>采样过程：将一幅连续图像(二维空间和亮度值都是连续值的图像；模拟图像)分割成M*N个网格，每一个网格用一个亮度值来显示。此时一个网格都称为像素，M×N的取值满足采样定理。</li></ul><img src="https://img-blog.csdnimg.cn/e9123c3177c048f58aa1f608faf02233.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:80%;" /><ul><li>量化：把采样点上对应的亮度连续变化区间转换为单个特定数码的过程。量化后，图像就被表示成一个整数矩阵。每个像素具有两个属性：位置和灰度。位置由行、列表示。灰度表示该像素位置上亮暗程度的整数。此数字矩阵M×N就作为计算机处理的对象了。灰度级一般为0－255（8bit量化）。</li></ul><h3 id="2-3-均匀采样的实现方式"><a href="#2-3-均匀采样的实现方式" class="headerlink" title="2.3 均匀采样的实现方式"></a>2.3 均匀采样的实现方式</h3><p>取样的实现是由产生数字图像的传感器或者数字化装置决定，比如扫描仪(分为线阵扫描仪和面阵扫描仪)。</p><ul><li>线扫方式：将感知单元排成一个线阵完成一维图像的采样成像，随着成像传感器所在的遥感平台的移动或者通过机械的确定等间隔的增量数值完成各行的采样。从而完成一幅二维图像的采样。</li><li>面扫方式：实现思路是将M*N个感知单元等间隔地排列成一个感知单元阵列，并行完成一幅二维图像的采样</li><li>其次，均匀量化实质是将图像的灰度取值范围[0,Lmax]划分成L个等级，并将二维图像平面上的M*N个网格的中心点的灰度值分别量化成L个等级中与其最接近的那个等级值。(一般的数字图像灰度级取值范围为从黑到白，即从[0，L-1]。0表黑，L-1表示白)。</li></ul><p>补充：非均匀采样的概念<br>非均匀量化：在视觉上，根据图像细节的丰富程度进行间距选取。越丰富时，采样间距就小，否则间可以调大。在统计特性上，像素灰度值频繁出现的灰度值范围内可取小间距；而对于像素灰度值极少出现的范围则取大间距也能够满足。即细节对应紧密，平缓对应稀疏。</p><h3 id="2-4-空间分辨率和灰度分辨率"><a href="#2-4-空间分辨率和灰度分辨率" class="headerlink" title="2.4 空间分辨率和灰度分辨率"></a>2.4 空间分辨率和灰度分辨率</h3><p>1、空间分辨率</p><p><strong>图像中可分辨的最小细节，主要由采样间隔值决定。</strong></p><p>用单位距离内可分辨的最大线对数来度量。如用黑白交替的垂线构造图形，线宽为W，黑白线对宽为2W，则单位距离内有1/2W个线对。</p><p>空间分辨率反映的是图像数字化对图像像素划分的密度，即反映的是一个图像的细节。如果细节越丰富，采样的间距就越小越清晰。如下图所示：</p><img src="https://img-blog.csdnimg.cn/7ad45de7ab624ac4a1a45d7e44370c51.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom: 80%;" /><p>2、灰度级分辨率</p><p><strong>指在灰度级别中可分辨的最小变化，通常将灰度级级数L称为图像的灰度级分辨率。</strong></p><p>承接着均匀分布来说，灰度级分辨率跟均匀分布的实质差别不大。灰度级分辨率实质就是在对连续图像中，对灰度级别的一个细节分辨的最小变化。即假设均匀变化的量化从[0,L-1],256灰度级分辨率对细节的分辨非常清晰。那么将分辨率降到32、16、8甚至2时，因为对细节的划分越来越稀疏，反而会出现“伪轮廓、丢失细节”等方面的问题的出现。</p><img src="https://img-blog.csdnimg.cn/5457ce7acc9641449c69e23d1fc2cc27.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom: 50%;" /><p>可以看出灰度设定的细节越松散，对于部分地方差别非常明显。</p><h3 id="2-5-数字图像存储空间的计算"><a href="#2-5-数字图像存储空间的计算" class="headerlink" title="2.5 数字图像存储空间的计算"></a>2.5 数字图像存储空间的计算</h3><p>需要根据图像的类型进行分别存储空间计算。数字化图像数据有两种存储方式：<strong>位图存储</strong>和<strong>矢量存储</strong>。</p><p>1、图像分类</p><p>黑白（二值图像）：图像的每个色素只能是黑或白，没有中间的过渡，故又称为二值图像。二值图像的像素值为0或1。<br>灰度图像：每个像素的信息由一个量化的灰度级来描述的图像，没有彩色信息。<br>彩色图像：每个像素的信息由RGB三原色构成的图像，其中RGB是由不同的灰度级来表示的。</p><p>2、位与色</p><p>1位可以表示2种状态，2位可以表示4种 状态，3位可以表示8种( 2^3)状态…以此类推。</p><p>位与颜色在于一个像素所占的bit位个数。也就是说，越低位所表现的图像越单调黑白；越高位图像所能展示的像素颜色越丰富。</p><p>位图存储计算示例如下：</p><p><img src="https://img-blog.csdnimg.cn/8082a0721ef54d35af584fc8e9696d45.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><h3 id="2-6-4-邻域、8-邻域的概念"><a href="#2-6-4-邻域、8-邻域的概念" class="headerlink" title="2.6 4-邻域、8-邻域的概念"></a>2.6 4-邻域、8-邻域的概念</h3><p><img src="https://img-blog.csdnimg.cn/3dcf0f88c03346e2bb344f7e26e051fe.png#pic_center" alt="在这里插入图片描述"></p><p>如果对于像素p坐标位于某个位置，其水平和垂直方面相邻的像素q最多有四个。</p><p><img src="https://img-blog.csdnimg.cn/3d9607976fbf4f919eac8cd29d81aadb.png#pic_center" alt="在这里插入图片描述"></p><p>同理，四对角邻域就是对角方向的相邻最多有四个像素p</p><p><img src="https://img-blog.csdnimg.cn/855bfdd7eb9a40489df1b0901133c533.png#pic_center" alt="在这里插入图片描述"></p><p>上述两个概念的结合就是8—邻域。也就是说如果像素p和q是4邻接，那么一定就是8邻接。</p><h3 id="2-7-连通域的标示（区域标示）"><a href="#2-7-连通域的标示（区域标示）" class="headerlink" title="2.7 连通域的标示（区域标示）"></a>2.7 连通域的标示（区域标示）</h3><p>连通域标记，就是将一副二值图像中的每个白色像素进行标记，属于同一个连通域的白色像素标记相同，不同连通域的白色像素有不同的标记，从而能将图像中每个连通域提取出来。</p><h1 id="3、数字图像的基本运算"><a href="#3、数字图像的基本运算" class="headerlink" title="3、数字图像的基本运算"></a>3、数字图像的基本运算</h1><h3 id="3-1-灰度直方图的概念"><a href="#3-1-灰度直方图的概念" class="headerlink" title="3.1 灰度直方图的概念"></a>3.1 灰度直方图的概念</h3><p><strong>是一种表示数字图像中各级灰度值及其出现频数的关系的函数，实质上就是柱状图。</strong></p><p>灰度图像的直方图是一种描述一幅灰度图像中灰度级内容的最简单且最有用的工具。</p><p>1.直方图的位置缺失性</p><p>灰度直方图仅仅反映了数字图像中各个灰度级出现频数的分布，但是无法确定像素的位置，即两幅图可能由相同的直方图，但是对应的像素可能处在不同的位置。</p><p>2.直方图与图像的一对多特性</p><p>每一幅图像可以唯一确定一个直方图，但是由于直方图的位置缺失性而导致直方图与图像的具有一对多特性。</p><p>3.直方图的可叠加性</p><p>由于灰度直方图统计的是各灰度级出现频数的统计值，若一幅图像分为几个子图，则该图像的直方图就等于各子图直方图的叠加。</p><h3 id="3-2-灰度直方图与图像显示效果的关系"><a href="#3-2-灰度直方图与图像显示效果的关系" class="headerlink" title="3.2 灰度直方图与图像显示效果的关系"></a>3.2 灰度直方图与图像显示效果的关系</h3><p>总的来说：直方图反映了图像的清晰程度，当直方图均匀分布时，图像最清晰。</p><p>具体说来：</p><p>暗图像对应的直方图组成成分集中在灰度值较小（暗）的左边一侧；<br>亮图像的直方图则倾向于灰度值较大（亮）的右边一侧；<br>对比度较低的图像对应的直方图窄而集中于灰度级的中部；<br>对比度高的图像对应的直方图分布范围宽而且分布均匀。</p><h3 id="3-3-图像几何变换的概念"><a href="#3-3-图像几何变换的概念" class="headerlink" title="3.3 图像几何变换的概念"></a>3.3 图像几何变换的概念</h3><p>图像的几何变换用于使得原图像产生大小、形状和位置等变化的效果。</p><h3 id="3-4-哪些属于图像的几何变换？它们的含义是什么？"><a href="#3-4-哪些属于图像的几何变换？它们的含义是什么？" class="headerlink" title="3.4 哪些属于图像的几何变换？它们的含义是什么？"></a>3.4 哪些属于图像的几何变换？它们的含义是什么？</h3><p>图像的几何变换包括图像平移变换、图像旋转变换、图像镜像、图像转置、图像的缩放</p><h3 id="3-5-图像旋转变换的步骤"><a href="#3-5-图像旋转变换的步骤" class="headerlink" title="3.5 图像旋转变换的步骤"></a>3.5 图像旋转变换的步骤</h3><p>将画布变大<br>将坐标取整<br>点旋转变换或者图像像素点旋转变化进行坐标平移<br>白点填充：近邻差值和线性差值</p><h1 id="4、空间域图像增强"><a href="#4、空间域图像增强" class="headerlink" title="4、空间域图像增强"></a>4、空间域图像增强</h1><h3 id="4-1-图像增强的概念"><a href="#4-1-图像增强的概念" class="headerlink" title="4.1 图像增强的概念"></a>4.1 图像增强的概念</h3><p>图像增强就是通过对图像的某些特征如如边缘、轮廓、对比度等内容，进行强调或者尖锐化。使之更加适合于人眼的观察或者机器的处理的一种技术。</p><h3 id="4-2-直方图均衡化的目的、基本思想、相关计算"><a href="#4-2-直方图均衡化的目的、基本思想、相关计算" class="headerlink" title="4.2 直方图均衡化的目的、基本思想、相关计算"></a>4.2 直方图均衡化的目的、基本思想、相关计算</h3><p><strong>目的：把一幅已知灰度概率分布的图像，变换成具有均匀概率分布的新图像。</strong></p><p>基本思想：把一已知灰度概率分布的图像，变换成具有均匀概率分布的新图像，<strong>通过使其像素灰度值范围和对比度增大，来实现对图像增强的技术和方法</strong>。</p><p>首先找一种变换，使具有任意概率分布密度的直方图的图像，变换成接 近于均匀概率分布密度的直方图的图像。设 r 为原图像的归一化灰度值, 0≤r≤1，s 为增强后的新图像的归一 化灰度值，且0≤s≤1，直方图均衡变换函数为：<br>                                        s = T ( r )        0 ≤ r ≤ 1</p><p>T®的选取应满足如下条件：</p><p>（1）在区间0≤r≤1内，T®为单值单调增加；（保证原图各灰度级在变换后 仍保持从黑到白（或从白到黑）的排列次序）<br>（2）对于0≤r≤1，有0≤s≤1。（保证变换前后灰度值动态范围的一致性）</p><p>从s到r的反变换r=T^-1(s)同样满足条件（1）（2）.</p><h2 id="4-3中值滤波器的作用和原理"><a href="#4-3中值滤波器的作用和原理" class="headerlink" title="4.3中值滤波器的作用和原理"></a>4.3中值滤波器的作用和原理</h2><p>作用：克服线性平滑滤波所引起的图像模糊问题，在消除噪声的同时，可较好地保留图像的边缘信息。</p><p>原理：基于某种中值滤波窗口，对该窗口覆盖的所有像素的灰度值进行排序，选取中间值代替窗口中所有像素的中点像素的灰度值。</p><h2 id="4-4均值滤波器、中值滤波器对高斯噪声和椒盐噪声的滤波效果"><a href="#4-4均值滤波器、中值滤波器对高斯噪声和椒盐噪声的滤波效果" class="headerlink" title="4.4均值滤波器、中值滤波器对高斯噪声和椒盐噪声的滤波效果"></a>4.4均值滤波器、中值滤波器对高斯噪声和椒盐噪声的滤波效果</h2><p>对椒盐噪声：均值滤波效果差，中值滤波效果好</p><p>对高斯噪声：均值效果好，中值效果差</p><h2 id="4-5图像锐化的原理，对于数字图像，如何求导数-微分的？"><a href="#4-5图像锐化的原理，对于数字图像，如何求导数-微分的？" class="headerlink" title="4.5图像锐化的原理，对于数字图像，如何求导数/微分的？"></a>4.5图像锐化的原理，对于数字图像，如何求导数/微分的？</h2><p>原理：增强和突出被模糊图像的细节，即增强和突出图像中景物的边缘和轮廓。</p><h1 id="5、频率域图像处理"><a href="#5、频率域图像处理" class="headerlink" title="5、频率域图像处理"></a>5、频率域图像处理</h1><h3 id="5-1-离散傅里叶变换的性质"><a href="#5-1-离散傅里叶变换的性质" class="headerlink" title="5.1 离散傅里叶变换的性质"></a>5.1 离散傅里叶变换的性质</h3><p>结合欧拉公式和傅里叶积分：</p><img src="https://img-blog.csdnimg.cn/b7a0d258e2b34c29a0952b0caa847917.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:67%;" /><img src="https://img-blog.csdnimg.cn/2ccb9a8ed9a44a0885f875a7f37f0daa.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom: 50%;" /><img src="https://img-blog.csdnimg.cn/b9b02754f48c4529afc4432f727c0666.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:67%;" /><p>变换分析的直观在于将一个信号波形拆分成很多不同频率的正弦波之和，即最后得到的相位谱和相位角，</p><p>基于如上，傅里叶变换性质如下：</p><ul><li><strong>变换系数矩阵</strong></li><li><strong>可分离性</strong></li><li><strong>平均值</strong></li><li><strong>周期性</strong></li><li><strong>共轭对称性</strong></li><li><strong>平移性</strong></li></ul><p>线性性质、可分离性、平均值性质、周期性、共扼对称性、平移性、旋转不变性、尺度变换性、卷积性质</p><p>线性性质就是将函数和的傅里叶变换等于各函数傅里叶变换的和，可以理解成“一个信号波形拆分成很多不同频率的正弦波之和”。<br>可分离性就是将二位傅里叶变换拆分成两次一维DFT，简单来说就是二元函数的求导可以两次求导拆分。<br>平均值性质就是在原点的傅里叶变换即等于图像的平均灰度级。<br>周期性就是离散傅立叶变换DFT和它的反变换是以M、N为周期的函数。</p><img src="https://img-blog.csdnimg.cn/3925c82b56f64026a27fe8138c1c109d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:80%;" /><p>共轭对称性就是设f(x,y)为实函数，则其傅里叶变换F(u,v)具有共轭对称性。图像的傅立叶变换结果是以原点为中心的共辄对称函数。<br>平移性就是将函数f(x,y)乘以一个指数项，相当于把其变换 后的傅里叶频谱的坐标原点平移或者空域坐标原点平移。<br>旋转不变性：就是将空间域函数旋转x角度，相应的傅里叶变换在频域中也旋转相同的x角度。</p><img src="https://img-blog.csdnimg.cn/076a79ead1084a01a64d9c0a570f5a3c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:67%;" /><p>尺度变换性：同理就是信号在时域中压缩（变化速度加快）等效 于在频域扩展（频带加宽)；反之亦然<br>卷积性质：</p><img src="https://img-blog.csdnimg.cn/1a2e4fda0172426b9d88a8e463698465.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述" style="zoom:67%;" /><h3 id="5-2-理解高频区域、低频区域对应的是什么数据"><a href="#5-2-理解高频区域、低频区域对应的是什么数据" class="headerlink" title="5.2 理解高频区域、低频区域对应的是什么数据"></a>5.2 理解高频区域、低频区域对应的是什么数据</h3><p>先通过对图像进行离散傅里叶变换把图像变换到频率域，然 后利用适当的频率域图像处理方式对图像进行处理，处理完 后再把它转换回空间域中，就可解决那些在空间域不便于解 决的图像处理问题。那么就需要理解频率域上的问题。</p><p>当从变换的原点离开时，<strong>低频对应着图像的缓慢变化分量，比如一幅图像中较平坦的区域</strong>。<br>进一步离开原点时，较高的频率开始对应图像中变化越来越快的灰度级， <strong>它们反映了一幅图像中物体的边缘和灰度级突发改变(如噪声)部分的图像成分</strong>。</p><h3 id="5-3-低通滤波、高通滤波、带阻滤波和带通滤波的概念"><a href="#5-3-低通滤波、高通滤波、带阻滤波和带通滤波的概念" class="headerlink" title="5.3 低通滤波、高通滤波、带阻滤波和带通滤波的概念"></a>5.3 低通滤波、高通滤波、带阻滤波和带通滤波的概念</h3><p>频率域图像增强核心：</p><p>对图像的傅立叶频谱进行低通滤波(使低频通过，使高频衰减)来滤除噪声。<br>通过对图像的傅立叶频谱进行高通滤波(使高频通过，使低频衰减) 突出图像中的边缘和轮廓。<br>图像中的边缘和灰度的陡峭变化对应于傅立叶频谱的高频部分，选择能使高频通过、使低频衰减的转 移函数，就可以实现高通滤波，达到突出图像的高频边缘 成分，实现图像增强的效果。</p><p>用于消除以某点为对称中心的给定区域内的频率，或用于阻止以原点为对称中心的一定频率范围内信号通过的问题，就可以用带阻滤波器实现。带通滤波器也可以通过对相应的带阻滤波器进行“翻转”获得，即1-‘带阻滤波器的传递函数’。</p><h3 id="5-4-常见的低通滤波器"><a href="#5-4-常见的低通滤波器" class="headerlink" title="5.4 常见的低通滤波器"></a>5.4 常见的低通滤波器</h3><p>低通滤波：理想低通滤波器、巴特沃斯低通滤波器、高斯低通滤波器</p><h3 id="5-5-理想低通滤波器的概念，原理"><a href="#5-5-理想低通滤波器的概念，原理" class="headerlink" title="5.5 理想低通滤波器的概念，原理"></a>5.5 理想低通滤波器的概念，原理</h3><p>选择能使低频通过、使高频衰减的转移函数，就可以实现低通 滤波，达到滤除噪声的目的。</p><p>理想低通滤波器（ ILPF ）的转移函数定义:</p><p><img src="https://img-blog.csdnimg.cn/11ec9596b40a461c844e9420b5f49dff.png#pic_center" alt="在这里插入图片描述"></p><p>D0是一个非负整数，D(u,v)为频率平面从原点到点(u,v)的距离。</p><p><img src="https://img-blog.csdnimg.cn/8a4f927e0e5944258afeb3c846fba5b1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>简单来说，就是只有那些位于该圆柱体内的频率范围的信号才能通过，而位于圆柱体外的频率成分都将被滤掉。</p><h1 id="6、图像恢复"><a href="#6、图像恢复" class="headerlink" title="6、图像恢复"></a>6、图像恢复</h1><h3 id="6-1-图像恢复的概念、目的、基本思路"><a href="#6-1-图像恢复的概念、目的、基本思路" class="headerlink" title="6.1 图像恢复的概念、目的、基本思路"></a>6.1 图像恢复的概念、目的、基本思路</h3><p>图像恢复是使退化了的图像去除退化因素，并以最大保真度恢复成原来图像的一种技术，也就是其目的就是改善图像质量。</p><p>图像恢复：从造成图像质量下降的客观原因出发，改善图像质量；试图恢复图像 原来的面貌。图像恢复总是试图寻找引起图像质量下降的客观原因，有针对性地迕行 “恢复”处理。</p><p>图像的退化过程可以理解为施加于原图像上的运算和噪声两者联合作用的结果。</p><p>思路：1、找出使原图像退化的因素，找出图像质量下降的物理过程。</p><p>2、图像的退化过程模型化。3、据此采用相反的过程对图像进行处理，从而恢复出原图像。</p><h3 id="6-2-图像恢复与图像增强的相同点与区别"><a href="#6-2-图像恢复与图像增强的相同点与区别" class="headerlink" title="6.2 图像恢复与图像增强的相同点与区别"></a>6.2 图像恢复与图像增强的相同点与区别</h3><p>图像增强和图像恢复的目的都是改善图像质量。</p><p>图像增强：从主观视觉角度，改善图像质量；不着重考虑引起图像质量下降的客观因素；<br>图像恢复：从造成图像质量下降的客观原因出发，改善图像质量；试图恢复图像原来的面貌。<br>图像恢复总是试图寻找引起图像质量下降的客观原因，有针对性地进行 “恢复”处理。</p><h3 id="6-3-图像的退化过程是什么作用的结果"><a href="#6-3-图像的退化过程是什么作用的结果" class="headerlink" title="6.3 图像的退化过程是什么作用的结果"></a>6.3 图像的退化过程是什么作用的结果</h3><p>图像的退化过程可以理解为施加于原图像上的运算和噪声两者联合作用的结果。</p><h3 id="6-4-从物理现象上看，运动模糊图像是如何形成的"><a href="#6-4-从物理现象上看，运动模糊图像是如何形成的" class="headerlink" title="6.4 从物理现象上看，运动模糊图像是如何形成的"></a>6.4 从物理现象上看，运动模糊图像是如何形成的</h3><p><strong>相机镜头和对象之间在曝光瞬间的相对运动造成的模糊。</strong></p><p>运动模糊图象实际上就是同一景物图象经过一系列的距离延迟后再叠加，最终形成的图象。</p><h3 id="6-5-加性噪声、乘性噪声的区别"><a href="#6-5-加性噪声、乘性噪声的区别" class="headerlink" title="6.5 加性噪声、乘性噪声的区别"></a>6.5 加性噪声、乘性噪声的区别</h3><p>叠加在图像上的噪声，与图像信号及灰度值大小无关，这种独立于图像信号的噪声称为加性噪声</p><p>对有用信号有调幅作用的噪声，噪声的幅值与图像本身的灰度（亮度）值有关，这种噪声称为乘性噪声</p><h3 id="6-6-高斯噪声的概念"><a href="#6-6-高斯噪声的概念" class="headerlink" title="6.6 高斯噪声的概念"></a>6.6 高斯噪声的概念</h3><p>高斯噪声是一种源于电子电路噪声和由低照明度或高温带来的传感器噪声</p><p>概率密度服从高斯分布的噪声。</p><h1 id="8、小波图像处理"><a href="#8、小波图像处理" class="headerlink" title="8、小波图像处理"></a>8、小波图像处理</h1><h3 id="8-1-小波变换与傅立叶变换的区别"><a href="#8-1-小波变换与傅立叶变换的区别" class="headerlink" title="8.1 小波变换与傅立叶变换的区别"></a>8.1 小波变换与傅立叶变换的区别</h3><p>小波变换弥补了傅里叶变换不能描述随时间变化的频率特性的不足。</p><p>傅里叶变换：知道一段时间内，信号的各个频率分量有分别多少。<br>小波变换：知道一段时间内，信号的各个频率分量有分别多少，以及他们都是什么时候出现的。</p><h3 id="8-2-小波的概念"><a href="#8-2-小波的概念" class="headerlink" title="8.2 小波的概念"></a>8.2 小波的概念</h3><p>小波：区域小、长度有限且均值为0的振荡波形。</p><p>小：即衰减性，局部非0。非0系数的个数多少，反映了高频成分的丰富程度。</p><p>波：即波动性。在于振幅正负相间的一种振荡形式</p><h3 id="8-3-二维离散小波变换后分解的结果是什么"><a href="#8-3-二维离散小波变换后分解的结果是什么" class="headerlink" title="8.3 二维离散小波变换后分解的结果是什么"></a>8.3 二维离散小波变换后分解的结果是什么</h3><p>是一维离散小波变换的推广，是将信号在不同尺度上的分解，从而得到原始信号的近似值和细节值；由于信号是二维的，所以分解也是二维的。</p><p>分解后的结果是：</p><ul><li>近似分量；</li><li>水平细节分量；</li><li>垂直细节分量；</li><li>对角细节分量；</li></ul><h1 id="9、图像分割"><a href="#9、图像分割" class="headerlink" title="9、图像分割"></a>9、图像分割</h1><h3 id="9-1-图像分割的作用，具体的图像分割方法"><a href="#9-1-图像分割的作用，具体的图像分割方法" class="headerlink" title="9.1 图像分割的作用，具体的图像分割方法"></a>9.1 图像分割的作用，具体的图像分割方法</h3><p><strong>图像分割作用：把图像划分成若干具有相近或相同特性的子区域，以便继续在分割形成的相关区域中提取目标，并根据目标特征或结构信息对其进行分类和识别，最后给出整幅图像分析结果的描述信息。</strong><br>分割的目的：将图像划分为不同区域<br>分割的依据：图像中各区域具有不同的特性，比如，灰度、颜色、纹理。目标可以对应单个区域，也可以对应多个区域。<br><strong>分割方法：</strong></p><ul><li>基于边缘检测的图像分割</li><li>基于阈值的图像分割</li><li>基于跟踪的图像分割</li><li>基于区域的图像分割</li></ul><h3 id="9-2-Hough变换的核心思想"><a href="#9-2-Hough变换的核心思想" class="headerlink" title="9.2 Hough变换的核心思想"></a>9.2 Hough变换的核心思想</h3><p>核心思想在于利用线对偶性将图像空间坐标X-Y变换到关于P-Q参数空间，将给定的直线或者曲线变换成参数空间的点形成峰值，就可以把直线或曲线的检测问题变为寻找峰值的问题，并将原本检测整体特性转换成检测局部特性的问题。</p><p>用来从图像中分离出具有某种相同特征的几何形状（如，直线，圆等）。最基本的霍夫变换是从黑白图像中检测直线(线段)。</p><h3 id="9-3-阈值化分割方法的原理"><a href="#9-3-阈值化分割方法的原理" class="headerlink" title="9.3 阈值化分割方法的原理"></a>9.3 阈值化分割方法的原理</h3><p>阈值化分割就是提取出物体与背景的灰度差异，并且把图像分为具有不同灰度级的目标区域和背景区域的一种图像分割技术。</p><p><img src="https://img-blog.csdnimg.cn/77c138bc62974b56a666548cbde8bb55.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5bCP6Im-5om2,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="在这里插入图片描述"></p><p>如上图所示，暗的地方代表背景，亮的地方代表物体。此时我们就在这两个峰值中间的谷底T为阈值来切分背景和物体来分别两者。</p><h1 id="10、图像特征提取"><a href="#10、图像特征提取" class="headerlink" title="10、图像特征提取"></a>10、图像特征提取</h1><h3 id="10-1-梯度边缘检测方法的概念，典型的边缘检测算子有哪些"><a href="#10-1-梯度边缘检测方法的概念，典型的边缘检测算子有哪些" class="headerlink" title="10.1 梯度边缘检测方法的概念，典型的边缘检测算子有哪些"></a>10.1 梯度边缘检测方法的概念，典型的边缘检测算子有哪些</h3><p>边缘检测就是一种使用数学方法对图像像素集合灰度变化具有阶跃或者屋顶等变化进行提取检测的一种技术，一般可以通过使用一次求导或者二次求导发现其中的规律。而梯度在于对二元函数针对x方向或者y方向进行一次偏微分求导的过程，得到图像的梯度幅度。</p><ul><li>Roberts算子</li><li>Sobel算子</li><li>Prewitt算子</li></ul><h3 id="10-2-图像纹理的主要特性"><a href="#10-2-图像纹理的主要特性" class="headerlink" title="10.2 图像纹理的主要特性"></a>10.2 图像纹理的主要特性</h3><ul><li>纹理的特性：粗糙度、方向性、规则性。</li></ul><h3 id="10-3-图像的熵的概念"><a href="#10-3-图像的熵的概念" class="headerlink" title="10.3 图像的熵的概念"></a>10.3 图像的熵的概念</h3><p><strong>图像的熵反映了图像中平均信息量的多少</strong>，反映的是图像的复杂程度。并且图像的熵是一个整体量，不代表某个局部。一维熵表示图像中灰度分布的聚集特征所包含的信息量。</p><h1 id="11、彩色图像处理"><a href="#11、彩色图像处理" class="headerlink" title="11、彩色图像处理"></a>11、彩色图像处理</h1><h3 id="11-1-三基色、加色系统、减色系统、RGB-模型、HSI-模型的含义"><a href="#11-1-三基色、加色系统、减色系统、RGB-模型、HSI-模型的含义" class="headerlink" title="11.1 三基色、加色系统、减色系统、RGB 模型、HSI 模型的含义"></a>11.1 三基色、加色系统、减色系统、RGB 模型、HSI 模型的含义</h3><ul><li><p>三基色：自然界绝大部分颜色可以分解成红、绿、蓝三种颜色组合而成。</p></li><li><p>加色系统：红绿蓝三基色按照不同的比例进行相加混色称为相加混色。</p></li></ul><ul><li>减色系统：利用染料等吸色系统可以实现相减混色，比如白光照射在青色染料能够吸收红色而反射青色，是相对于加色系统而言的概念。</li></ul><ul><li>RGB模型：基于笛卡尔坐标构成彩色立方体子空间。RGB对应的是相应坐标轴的顶点，黑色是原点，白色是离原点最远的顶点。除了白色、黑色、红绿蓝以外的顶点，还有品红(蓝加红)、青（绿加蓝）、黄（红加绿）。</li></ul><ul><li>HSI模型：H：色调，反映了该颜色最接近什么样的光谱波长、S：饱和度，是色环的原点到彩色点的半径长度、I：亮度，确定了像素的整体亮度。就是集合三种描述被观察物体的颜色的解释，常用于观察者进行颜色匹配实验使用。它是一个双圆锥子集。</li></ul><h3 id="11-2-伪彩色增强的概念"><a href="#11-2-伪彩色增强的概念" class="headerlink" title="11.2 伪彩色增强的概念"></a>11.2 伪彩色增强的概念</h3><p>伪彩色增强就是将一幅具有不同灰度级的图像通过一定的映射转变为彩色图像，来达到增强人对图像的分辨能力。</p><p>就是将灰度图转换成彩色图片的技术。</p><h3 id="11-3-什么原因导致彩色图像数字化后，景物中物体的颜色偏离了它原来的真实色彩"><a href="#11-3-什么原因导致彩色图像数字化后，景物中物体的颜色偏离了它原来的真实色彩" class="headerlink" title="11.3 什么原因导致彩色图像数字化后，景物中物体的颜色偏离了它原来的真实色彩"></a>11.3 什么原因导致彩色图像数字化后，景物中物体的颜色偏离了它原来的真实色彩</h3><p>颜色通道中<strong>敏感度</strong>、<strong>增光因子</strong>、<strong>偏移量</strong>等使图像的3个分量发生了不同的线性变换。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、绪论&quot;&gt;&lt;a href=&quot;#1、绪论&quot; class=&quot;headerlink&quot; title=&quot;1、绪论&quot;&gt;&lt;/a&gt;1、绪论&lt;/h1&gt;&lt;h3 id=&quot;1-1-数字图像的概念&quot;&gt;&lt;a href=&quot;#1-1-数字图像的概念&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://example.com/2022/01/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    <id>http://example.com/2022/01/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</id>
    <published>2022-01-18T05:47:05.000Z</published>
    <updated>2022-01-18T05:47:05.445Z</updated>
    
    
    
    
    
  </entry>
  
</feed>
